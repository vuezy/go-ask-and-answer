// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: answers.sql

package database

import (
	"context"
	"time"
)

const createAnswer = `-- name: CreateAnswer :exec
INSERT INTO answers (body, question_id, user_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateAnswerParams struct {
	Body       string
	QuestionID int32
	UserID     int32
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) error {
	_, err := q.exec(ctx, q.createAnswerStmt, createAnswer,
		arg.Body,
		arg.QuestionID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answers
WHERE id = ? AND user_id = ?
`

type DeleteAnswerParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteAnswer(ctx context.Context, arg DeleteAnswerParams) error {
	_, err := q.exec(ctx, q.deleteAnswerStmt, deleteAnswer, arg.ID, arg.UserID)
	return err
}

const getAnswerById = `-- name: GetAnswerById :one
SELECT id, body, votes, question_id, user_id, created_at, updated_at FROM answers
WHERE id = ?
`

func (q *Queries) GetAnswerById(ctx context.Context, id int32) (Answer, error) {
	row := q.queryRow(ctx, q.getAnswerByIdStmt, getAnswerById, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Votes,
		&i.QuestionID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswersByQuestionId = `-- name: GetAnswersByQuestionId :many
SELECT answers.id, answers.body, answers.votes, answers.question_id, answers.user_id, answers.created_at, answers.updated_at, ` + "`" + `name` + "`" + `, email FROM answers
INNER JOIN users ON users.id = answers.user_id
WHERE question_id = ?
ORDER BY votes DESC, answers.updated_at ASC
`

type GetAnswersByQuestionIdRow struct {
	ID         int32
	Body       string
	Votes      int32
	QuestionID int32
	UserID     int32
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Name       string
	Email      string
}

func (q *Queries) GetAnswersByQuestionId(ctx context.Context, questionID int32) ([]GetAnswersByQuestionIdRow, error) {
	rows, err := q.query(ctx, q.getAnswersByQuestionIdStmt, getAnswersByQuestionId, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnswersByQuestionIdRow
	for rows.Next() {
		var i GetAnswersByQuestionIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Votes,
			&i.QuestionID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnswersByUserId = `-- name: GetAnswersByUserId :many
SELECT id, body, votes, question_id, user_id, created_at, updated_at FROM answers
WHERE user_id = ?
ORDER BY updated_at DESC
`

func (q *Queries) GetAnswersByUserId(ctx context.Context, userID int32) ([]Answer, error) {
	rows, err := q.query(ctx, q.getAnswersByUserIdStmt, getAnswersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Votes,
			&i.QuestionID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :exec
UPDATE answers
SET body = ?, updated_at = ?
WHERE id = ? AND user_id = ?
`

type UpdateAnswerParams struct {
	Body      string
	UpdatedAt time.Time
	ID        int32
	UserID    int32
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) error {
	_, err := q.exec(ctx, q.updateAnswerStmt, updateAnswer,
		arg.Body,
		arg.UpdatedAt,
		arg.ID,
		arg.UserID,
	)
	return err
}

const updateAnswerVotes = `-- name: UpdateAnswerVotes :exec
UPDATE answers
SET votes = votes + ?, updated_at = ?
WHERE id = ?
`

type UpdateAnswerVotesParams struct {
	Votes     int32
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateAnswerVotes(ctx context.Context, arg UpdateAnswerVotesParams) error {
	_, err := q.exec(ctx, q.updateAnswerVotesStmt, updateAnswerVotes, arg.Votes, arg.UpdatedAt, arg.ID)
	return err
}
