// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addUserCreditStmt, err = db.PrepareContext(ctx, addUserCredit); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserCredit: %w", err)
	}
	if q.checkIfEmailExistsStmt, err = db.PrepareContext(ctx, checkIfEmailExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIfEmailExists: %w", err)
	}
	if q.checkIfTokenIsActiveStmt, err = db.PrepareContext(ctx, checkIfTokenIsActive); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIfTokenIsActive: %w", err)
	}
	if q.checkIfVoteExistsStmt, err = db.PrepareContext(ctx, checkIfVoteExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIfVoteExists: %w", err)
	}
	if q.closeQuestionStmt, err = db.PrepareContext(ctx, closeQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query CloseQuestion: %w", err)
	}
	if q.createAnswerStmt, err = db.PrepareContext(ctx, createAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnswer: %w", err)
	}
	if q.createQuestionStmt, err = db.PrepareContext(ctx, createQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuestion: %w", err)
	}
	if q.createVoteStmt, err = db.PrepareContext(ctx, createVote); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVote: %w", err)
	}
	if q.deleteAnswerStmt, err = db.PrepareContext(ctx, deleteAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnswer: %w", err)
	}
	if q.deleteQuestionStmt, err = db.PrepareContext(ctx, deleteQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQuestion: %w", err)
	}
	if q.downvoteStmt, err = db.PrepareContext(ctx, downvote); err != nil {
		return nil, fmt.Errorf("error preparing query Downvote: %w", err)
	}
	if q.getAnswerByIdStmt, err = db.PrepareContext(ctx, getAnswerById); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnswerById: %w", err)
	}
	if q.getAnswersByQuestionIdStmt, err = db.PrepareContext(ctx, getAnswersByQuestionId); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnswersByQuestionId: %w", err)
	}
	if q.getAnswersByUserIdStmt, err = db.PrepareContext(ctx, getAnswersByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnswersByUserId: %w", err)
	}
	if q.getQuestionByIdStmt, err = db.PrepareContext(ctx, getQuestionById); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionById: %w", err)
	}
	if q.getQuestionsByUserIdStmt, err = db.PrepareContext(ctx, getQuestionsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionsByUserId: %w", err)
	}
	if q.getUserPointsAndCreditsStmt, err = db.PrepareContext(ctx, getUserPointsAndCredits); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPointsAndCredits: %w", err)
	}
	if q.loginStmt, err = db.PrepareContext(ctx, login); err != nil {
		return nil, fmt.Errorf("error preparing query Login: %w", err)
	}
	if q.registerUserStmt, err = db.PrepareContext(ctx, registerUser); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterUser: %w", err)
	}
	if q.removeUserCreditStmt, err = db.PrepareContext(ctx, removeUserCredit); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveUserCredit: %w", err)
	}
	if q.respondToQuestionStmt, err = db.PrepareContext(ctx, respondToQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query RespondToQuestion: %w", err)
	}
	if q.searchQuestionsStmt, err = db.PrepareContext(ctx, searchQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query SearchQuestions: %w", err)
	}
	if q.setActiveTokenStmt, err = db.PrepareContext(ctx, setActiveToken); err != nil {
		return nil, fmt.Errorf("error preparing query SetActiveToken: %w", err)
	}
	if q.updateAnswerStmt, err = db.PrepareContext(ctx, updateAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnswer: %w", err)
	}
	if q.updateAnswerVotesStmt, err = db.PrepareContext(ctx, updateAnswerVotes); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnswerVotes: %w", err)
	}
	if q.updateQuestionStmt, err = db.PrepareContext(ctx, updateQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQuestion: %w", err)
	}
	if q.updateUserPointsStmt, err = db.PrepareContext(ctx, updateUserPoints); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPoints: %w", err)
	}
	if q.upvoteStmt, err = db.PrepareContext(ctx, upvote); err != nil {
		return nil, fmt.Errorf("error preparing query Upvote: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addUserCreditStmt != nil {
		if cerr := q.addUserCreditStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserCreditStmt: %w", cerr)
		}
	}
	if q.checkIfEmailExistsStmt != nil {
		if cerr := q.checkIfEmailExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIfEmailExistsStmt: %w", cerr)
		}
	}
	if q.checkIfTokenIsActiveStmt != nil {
		if cerr := q.checkIfTokenIsActiveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIfTokenIsActiveStmt: %w", cerr)
		}
	}
	if q.checkIfVoteExistsStmt != nil {
		if cerr := q.checkIfVoteExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIfVoteExistsStmt: %w", cerr)
		}
	}
	if q.closeQuestionStmt != nil {
		if cerr := q.closeQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing closeQuestionStmt: %w", cerr)
		}
	}
	if q.createAnswerStmt != nil {
		if cerr := q.createAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnswerStmt: %w", cerr)
		}
	}
	if q.createQuestionStmt != nil {
		if cerr := q.createQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuestionStmt: %w", cerr)
		}
	}
	if q.createVoteStmt != nil {
		if cerr := q.createVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVoteStmt: %w", cerr)
		}
	}
	if q.deleteAnswerStmt != nil {
		if cerr := q.deleteAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnswerStmt: %w", cerr)
		}
	}
	if q.deleteQuestionStmt != nil {
		if cerr := q.deleteQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQuestionStmt: %w", cerr)
		}
	}
	if q.downvoteStmt != nil {
		if cerr := q.downvoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing downvoteStmt: %w", cerr)
		}
	}
	if q.getAnswerByIdStmt != nil {
		if cerr := q.getAnswerByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnswerByIdStmt: %w", cerr)
		}
	}
	if q.getAnswersByQuestionIdStmt != nil {
		if cerr := q.getAnswersByQuestionIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnswersByQuestionIdStmt: %w", cerr)
		}
	}
	if q.getAnswersByUserIdStmt != nil {
		if cerr := q.getAnswersByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnswersByUserIdStmt: %w", cerr)
		}
	}
	if q.getQuestionByIdStmt != nil {
		if cerr := q.getQuestionByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionByIdStmt: %w", cerr)
		}
	}
	if q.getQuestionsByUserIdStmt != nil {
		if cerr := q.getQuestionsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionsByUserIdStmt: %w", cerr)
		}
	}
	if q.getUserPointsAndCreditsStmt != nil {
		if cerr := q.getUserPointsAndCreditsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPointsAndCreditsStmt: %w", cerr)
		}
	}
	if q.loginStmt != nil {
		if cerr := q.loginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing loginStmt: %w", cerr)
		}
	}
	if q.registerUserStmt != nil {
		if cerr := q.registerUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerUserStmt: %w", cerr)
		}
	}
	if q.removeUserCreditStmt != nil {
		if cerr := q.removeUserCreditStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeUserCreditStmt: %w", cerr)
		}
	}
	if q.respondToQuestionStmt != nil {
		if cerr := q.respondToQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing respondToQuestionStmt: %w", cerr)
		}
	}
	if q.searchQuestionsStmt != nil {
		if cerr := q.searchQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchQuestionsStmt: %w", cerr)
		}
	}
	if q.setActiveTokenStmt != nil {
		if cerr := q.setActiveTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setActiveTokenStmt: %w", cerr)
		}
	}
	if q.updateAnswerStmt != nil {
		if cerr := q.updateAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnswerStmt: %w", cerr)
		}
	}
	if q.updateAnswerVotesStmt != nil {
		if cerr := q.updateAnswerVotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnswerVotesStmt: %w", cerr)
		}
	}
	if q.updateQuestionStmt != nil {
		if cerr := q.updateQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQuestionStmt: %w", cerr)
		}
	}
	if q.updateUserPointsStmt != nil {
		if cerr := q.updateUserPointsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPointsStmt: %w", cerr)
		}
	}
	if q.upvoteStmt != nil {
		if cerr := q.upvoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upvoteStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	addUserCreditStmt           *sql.Stmt
	checkIfEmailExistsStmt      *sql.Stmt
	checkIfTokenIsActiveStmt    *sql.Stmt
	checkIfVoteExistsStmt       *sql.Stmt
	closeQuestionStmt           *sql.Stmt
	createAnswerStmt            *sql.Stmt
	createQuestionStmt          *sql.Stmt
	createVoteStmt              *sql.Stmt
	deleteAnswerStmt            *sql.Stmt
	deleteQuestionStmt          *sql.Stmt
	downvoteStmt                *sql.Stmt
	getAnswerByIdStmt           *sql.Stmt
	getAnswersByQuestionIdStmt  *sql.Stmt
	getAnswersByUserIdStmt      *sql.Stmt
	getQuestionByIdStmt         *sql.Stmt
	getQuestionsByUserIdStmt    *sql.Stmt
	getUserPointsAndCreditsStmt *sql.Stmt
	loginStmt                   *sql.Stmt
	registerUserStmt            *sql.Stmt
	removeUserCreditStmt        *sql.Stmt
	respondToQuestionStmt       *sql.Stmt
	searchQuestionsStmt         *sql.Stmt
	setActiveTokenStmt          *sql.Stmt
	updateAnswerStmt            *sql.Stmt
	updateAnswerVotesStmt       *sql.Stmt
	updateQuestionStmt          *sql.Stmt
	updateUserPointsStmt        *sql.Stmt
	upvoteStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		addUserCreditStmt:           q.addUserCreditStmt,
		checkIfEmailExistsStmt:      q.checkIfEmailExistsStmt,
		checkIfTokenIsActiveStmt:    q.checkIfTokenIsActiveStmt,
		checkIfVoteExistsStmt:       q.checkIfVoteExistsStmt,
		closeQuestionStmt:           q.closeQuestionStmt,
		createAnswerStmt:            q.createAnswerStmt,
		createQuestionStmt:          q.createQuestionStmt,
		createVoteStmt:              q.createVoteStmt,
		deleteAnswerStmt:            q.deleteAnswerStmt,
		deleteQuestionStmt:          q.deleteQuestionStmt,
		downvoteStmt:                q.downvoteStmt,
		getAnswerByIdStmt:           q.getAnswerByIdStmt,
		getAnswersByQuestionIdStmt:  q.getAnswersByQuestionIdStmt,
		getAnswersByUserIdStmt:      q.getAnswersByUserIdStmt,
		getQuestionByIdStmt:         q.getQuestionByIdStmt,
		getQuestionsByUserIdStmt:    q.getQuestionsByUserIdStmt,
		getUserPointsAndCreditsStmt: q.getUserPointsAndCreditsStmt,
		loginStmt:                   q.loginStmt,
		registerUserStmt:            q.registerUserStmt,
		removeUserCreditStmt:        q.removeUserCreditStmt,
		respondToQuestionStmt:       q.respondToQuestionStmt,
		searchQuestionsStmt:         q.searchQuestionsStmt,
		setActiveTokenStmt:          q.setActiveTokenStmt,
		updateAnswerStmt:            q.updateAnswerStmt,
		updateAnswerVotesStmt:       q.updateAnswerVotesStmt,
		updateQuestionStmt:          q.updateQuestionStmt,
		updateUserPointsStmt:        q.updateUserPointsStmt,
		upvoteStmt:                  q.upvoteStmt,
	}
}
