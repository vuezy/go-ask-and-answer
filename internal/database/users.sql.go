// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const addUserCredit = `-- name: AddUserCredit :exec
UPDATE users
SET credits = GREATEST(0, credits + ?), updated_at = ?
WHERE id = ?
`

type AddUserCreditParams struct {
	Credits   int32
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) AddUserCredit(ctx context.Context, arg AddUserCreditParams) error {
	_, err := q.exec(ctx, q.addUserCreditStmt, addUserCredit, arg.Credits, arg.UpdatedAt, arg.ID)
	return err
}

const checkIfEmailExists = `-- name: CheckIfEmailExists :one
SELECT COUNT(*) FROM users
WHERE email = ?
`

func (q *Queries) CheckIfEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.queryRow(ctx, q.checkIfEmailExistsStmt, checkIfEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserPointsAndCredits = `-- name: GetUserPointsAndCredits :one
SELECT points, credits FROM users
WHERE id = ?
`

type GetUserPointsAndCreditsRow struct {
	Points  int32
	Credits int32
}

func (q *Queries) GetUserPointsAndCredits(ctx context.Context, id int32) (GetUserPointsAndCreditsRow, error) {
	row := q.queryRow(ctx, q.getUserPointsAndCreditsStmt, getUserPointsAndCredits, id)
	var i GetUserPointsAndCreditsRow
	err := row.Scan(&i.Points, &i.Credits)
	return i, err
}

const login = `-- name: Login :one
SELECT id, name, email, password, points, credits, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) Login(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.loginStmt, login, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Points,
		&i.Credits,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (` + "`" + `name` + "`" + `, email, ` + "`" + `password` + "`" + `, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type RegisterUserParams struct {
	Name      string
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.exec(ctx, q.registerUserStmt, registerUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const removeUserCredit = `-- name: RemoveUserCredit :exec
UPDATE users
SET credits = GREATEST(0, credits - ?), updated_at = ?
WHERE id = ?
`

type RemoveUserCreditParams struct {
	Credits   int32
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) RemoveUserCredit(ctx context.Context, arg RemoveUserCreditParams) error {
	_, err := q.exec(ctx, q.removeUserCreditStmt, removeUserCredit, arg.Credits, arg.UpdatedAt, arg.ID)
	return err
}

const updateUserPoints = `-- name: UpdateUserPoints :exec
UPDATE users
SET points = points + ?, updated_at = ?
WHERE id = ?
`

type UpdateUserPointsParams struct {
	Points    int32
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateUserPoints(ctx context.Context, arg UpdateUserPointsParams) error {
	_, err := q.exec(ctx, q.updateUserPointsStmt, updateUserPoints, arg.Points, arg.UpdatedAt, arg.ID)
	return err
}
