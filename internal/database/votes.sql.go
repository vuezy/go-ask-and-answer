// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: votes.sql

package database

import (
	"context"
	"time"
)

const checkIfVoteExists = `-- name: CheckIfVoteExists :one
SELECT id, val FROM votes
WHERE answer_id = ? AND user_id = ?
`

type CheckIfVoteExistsParams struct {
	AnswerID int32
	UserID   int32
}

type CheckIfVoteExistsRow struct {
	ID  int32
	Val int32
}

func (q *Queries) CheckIfVoteExists(ctx context.Context, arg CheckIfVoteExistsParams) (CheckIfVoteExistsRow, error) {
	row := q.queryRow(ctx, q.checkIfVoteExistsStmt, checkIfVoteExists, arg.AnswerID, arg.UserID)
	var i CheckIfVoteExistsRow
	err := row.Scan(&i.ID, &i.Val)
	return i, err
}

const createVote = `-- name: CreateVote :exec
INSERT INTO votes (val, answer_id, user_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateVoteParams struct {
	Val       int32
	AnswerID  int32
	UserID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) error {
	_, err := q.exec(ctx, q.createVoteStmt, createVote,
		arg.Val,
		arg.AnswerID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const downvote = `-- name: Downvote :exec
UPDATE votes
SET val = -1, updated_at = ?
WHERE id = ?
`

type DownvoteParams struct {
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) Downvote(ctx context.Context, arg DownvoteParams) error {
	_, err := q.exec(ctx, q.downvoteStmt, downvote, arg.UpdatedAt, arg.ID)
	return err
}

const upvote = `-- name: Upvote :exec
UPDATE votes
SET val = 1, updated_at = ?
WHERE id = ?
`

type UpvoteParams struct {
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) Upvote(ctx context.Context, arg UpvoteParams) error {
	_, err := q.exec(ctx, q.upvoteStmt, upvote, arg.UpdatedAt, arg.ID)
	return err
}
